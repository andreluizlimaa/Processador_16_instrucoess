// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/26/2024 10:21:48"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Comparator_LG_1bit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Comparator_LG_1bit_vlg_sample_tst(
	A,
	B,
	ie,
	ig,
	il,
	sampler_tx
);
input  A;
input  B;
input  ie;
input  ig;
input  il;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or ie or ig or il)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Comparator_LG_1bit_vlg_check_tst (
	e,
	g,
	l,
	sampler_rx
);
input  e;
input  g;
input  l;
input sampler_rx;

reg  e_expected;
reg  g_expected;
reg  l_expected;

reg  e_prev;
reg  g_prev;
reg  l_prev;

reg  e_expected_prev;
reg  g_expected_prev;
reg  l_expected_prev;

reg  last_e_exp;
reg  last_g_exp;
reg  last_l_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	e_prev = e;
	g_prev = g;
	l_prev = l;
end

// update expected /o prevs

always @(trigger)
begin
	e_expected_prev = e_expected;
	g_expected_prev = g_expected;
	l_expected_prev = l_expected;
end



// expected e
initial
begin
	e_expected = 1'bX;
	e_expected = #999000 1'b0;
end 

// expected g
initial
begin
	g_expected = 1'bX;
	g_expected = #999000 1'b0;
end 

// expected l
initial
begin
	l_expected = 1'bX;
	l_expected = #999000 1'b0;
end 
// generate trigger
always @(e_expected or e or g_expected or g or l_expected or l)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected e = %b | expected g = %b | expected l = %b | ",e_expected_prev,g_expected_prev,l_expected_prev);
	$display("| real e = %b | real g = %b | real l = %b | ",e_prev,g_prev,l_prev);
`endif
	if (
		( e_expected_prev !== 1'bx ) && ( e_prev !== e_expected_prev )
		&& ((e_expected_prev !== last_e_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port e :: @time = %t",  $realtime);
		$display ("     Expected value = %b", e_expected_prev);
		$display ("     Real value = %b", e_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_e_exp = e_expected_prev;
	end
	if (
		( g_expected_prev !== 1'bx ) && ( g_prev !== g_expected_prev )
		&& ((g_expected_prev !== last_g_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port g :: @time = %t",  $realtime);
		$display ("     Expected value = %b", g_expected_prev);
		$display ("     Real value = %b", g_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_g_exp = g_expected_prev;
	end
	if (
		( l_expected_prev !== 1'bx ) && ( l_prev !== l_expected_prev )
		&& ((l_expected_prev !== last_l_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port l :: @time = %t",  $realtime);
		$display ("     Expected value = %b", l_expected_prev);
		$display ("     Real value = %b", l_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_l_exp = l_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1024000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Comparator_LG_1bit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A;
reg B;
reg ie;
reg ig;
reg il;
// wires                                               
wire e;
wire g;
wire l;

wire sampler;                             

// assign statements (if any)                          
Comparator_LG_1bit i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.e(e),
	.g(g),
	.ie(ie),
	.ig(ig),
	.il(il),
	.l(l)
);

// ie
always
begin
	ie = 1'b0;
	ie = #512000 1'b1;
	#512000;
end 

// il
always
begin
	il = 1'b0;
	il = #256000 1'b1;
	#256000;
end 

// ig
always
begin
	ig = 1'b0;
	ig = #128000 1'b1;
	#128000;
end 

// A
always
begin
	A = 1'b0;
	A = #64000 1'b1;
	#64000;
end 

// B
always
begin
	B = 1'b0;
	B = #32000 1'b1;
	#32000;
end 

Comparator_LG_1bit_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.ie(ie),
	.ig(ig),
	.il(il),
	.sampler_tx(sampler)
);

Comparator_LG_1bit_vlg_check_tst tb_out(
	.e(e),
	.g(g),
	.l(l),
	.sampler_rx(sampler)
);
endmodule

